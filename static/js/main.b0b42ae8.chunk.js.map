{"version":3,"sources":["assets/audio/loop.mp3","assets/audio/ball-incoming.mp3","assets/audio/ball-outgoing.mp3","assets/audio/game-over.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","fxLoop","UIFx","loopAudio","volume","loop","fxBallIncoming","ballIncomingAudio","fxBallOutgoing","ballOutgoingAudio","fxGameOverAudio","gameOverAudio","Config","InitialState","App","useLocalStorage","maxScore","setMaxScore","useState","fps","setFps","stageState","setStageState","scoreState","setScoreState","activeTouch","setActiveTouch","stage","useRef","deviceMotionLocker","animationRef","lastTimeFrameRef","score","initGameTime","initRoundTime","randomReturnTime","randomSwingTime","swingTime","ballState","time","undefined","current","deltaTime","currentFps","Math","trunc","difficulty","difficultySpeed","audioSpeed","setPlaybackRate","floor","random","play","setTimeout","requestAnimationFrame","onInput","onDeviceMotion","event","acceleration","x","y","z","valid","abs","useEffect","cancelAnimationFrame","window","DeviceMotionEvent","addEventListener","actionType","className","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0b42ae8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loop.1395a2aa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/ball-incoming.09c537af.mp3\";","module.exports = __webpack_public_path__ + \"static/media/ball-outgoing.177649ca.mp3\";","module.exports = __webpack_public_path__ + \"static/media/game-over.f945164c.mp3\";","import React, {useEffect, useState, useRef} from 'react';\nimport useLocalStorage from 'react-use-localstorage';\nimport UIFx from \"uifx\";\nimport './App.css';\n\nimport loopAudio from './assets/audio/loop.mp3';\nimport ballIncomingAudio from './assets/audio/ball-incoming.mp3';\nimport ballOutgoingAudio from './assets/audio/ball-outgoing.mp3';\nimport gameOverAudio from './assets/audio/game-over.mp3';\n\n/* Fx */\nconst fxLoop = new UIFx(loopAudio, { volume: 0.2, loop: true });\nconst fxBallIncoming = new UIFx(ballIncomingAudio, { volume: 0.8 });\nconst fxBallOutgoing = new UIFx(ballOutgoingAudio, { volume: 0.8 });\nconst fxGameOverAudio = new UIFx(gameOverAudio, { volume: 0.8 });\n\nconst Config = {\n  debug: false,\n  returnMin: 600, // ms\n  returnDiff: 200, // ms\n  swingLimit: 1000, // ms\n  gameOverScreenTimeout: 3000, // ms\n  accelerationRequired: 10, // m/s\n}\n\nconst InitialState = {\n  stage: 'start',\n  score: 0,\n  maxScore: 0,\n};\n\nfunction App() {\n  const [maxScore, setMaxScore] = useLocalStorage('maxScore', InitialState.maxScore);\n\n  const [fps, setFps] = useState(0);\n  const [stageState, setStageState] = useState(InitialState.stage);\n  const [scoreState, setScoreState] = useState(InitialState.score);\n  const [activeTouch, setActiveTouch] = useState(false);\n\n  const stage = useRef(InitialState.stage);\n  const deviceMotionLocker = useRef(false);\n\n  const animationRef = useRef();\n  const lastTimeFrameRef = useRef();\n\n  const score = useRef(InitialState.score);\n  const initGameTime = useRef();\n  const initRoundTime = useRef();\n  const randomReturnTime = useRef();\n  const randomSwingTime = useRef();\n  const swingTime = useRef();\n  const ballState = useRef();\n\n  const initApp = () => {\n    fxLoop.play();\n  };\n\n  const initGame = () => {\n    lastTimeFrameRef.current = undefined;\n\n    score.current = InitialState.score;\n    setScoreState(score.current);\n\n    initGameTime.current = undefined;\n    initRoundTime.current = undefined;\n    randomReturnTime.current = undefined;\n    randomSwingTime.current = undefined;\n    swingTime.current = undefined;\n    ballState.current = 0;\n\n    fxLoop.setPlaybackRate(1);\n    fxBallOutgoing.setPlaybackRate(1);\n    fxBallIncoming.setPlaybackRate(1);\n\n    stage.current = 'game';\n    setStageState(stage.current);\n    animationRef.current = requestAnimationFrame(loop);\n  };\n\n  const endGame = () => {\n    if (score.current >= maxScore) {\n      setMaxScore(score.current);\n    }\n    fxLoop.setPlaybackRate(1);\n    stage.current = 'over';\n    setStageState(stage.current);\n    setTimeout(() => {\n      stage.current = 'start';\n      setStageState(stage.current);\n    }, Config.gameOverScreenTimeout);\n  };\n\n  const hackGame = () => {\n    fxLoop.setPlaybackRate(1);\n    stage.current = 'hack';\n    setStageState(stage.current);\n    setTimeout(() => {\n      stage.current = 'start';\n      setStageState(stage.current);\n    }, Config.gameOverScreenTimeout);\n  };\n\n  const loop = time => {\n    if (lastTimeFrameRef.current === undefined) {\n      initGameTime.current = time;\n    } else {\n      const deltaTime = time - lastTimeFrameRef.current;\n      const currentFps = Math.trunc(1000 / deltaTime);\n      setFps(currentFps);\n    }\n\n    if ( initRoundTime.current === undefined ) {\n      initRoundTime.current = time;\n      const difficulty = Math.trunc(score.current / 10) / 10;\n      const difficultySpeed = 1 - difficulty;\n      const audioSpeed = 1 + difficulty;\n\n      fxBallOutgoing.setPlaybackRate(audioSpeed);\n      fxBallIncoming.setPlaybackRate(audioSpeed);\n      fxLoop.setPlaybackRate(audioSpeed);\n\n      randomReturnTime.current = time + (Math.floor(Math.random() * ((Config.returnMin + Config.returnDiff) - Config.returnMin + 1)) + Config.returnMin) * difficultySpeed;\n      randomSwingTime.current = randomReturnTime.current + (Config.swingLimit * difficultySpeed);\n      fxBallOutgoing.play();\n    }\n\n    if ( time >= randomReturnTime.current && ballState.current === 0) {\n      fxBallIncoming.play();\n      ballState.current = 1;\n    }\n\n    if (ballState.current === 1) {\n      if(swingTime.current !== undefined && swingTime.current >= randomReturnTime.current && swingTime.current <= randomSwingTime.current) {\n        score.current += 1;\n        setScoreState(score.current);\n        initRoundTime.current = undefined;\n        ballState.current = 0;\n        swingTime.current = undefined;\n      }\n\n      if (time >= randomSwingTime.current) {\n        fxGameOverAudio.play();\n        return endGame();\n      }\n    }\n\n    if (score.current >= 100) {\n      fxGameOverAudio.play();\n      return hackGame();\n    }\n\n    lastTimeFrameRef.current = time;\n    animationRef.current = requestAnimationFrame(loop);\n  };\n\n  const exitGame = () => {\n    cancelAnimationFrame(animationRef.current);\n  };\n\n  const onInput = () => {\n    if(stage.current === 'start') {\n      initGame();\n    } else {\n      swingTime.current = lastTimeFrameRef.current;\n    }\n  };\n\n  const onTouch = () => {\n    if (activeTouch) {\n      onInput();\n    }\n  }\n\n  const onDeviceMotion = (event) => {\n    if (deviceMotionLocker.current) return;\n    const {x, y, z} = event.acceleration;\n    let valid = 0;\n    if (Math.abs(x) >= Config.accelerationRequired) {\n      valid += 1;\n    }\n    if (Math.abs(y) >= Config.accelerationRequired) {\n      valid += 1;\n    }\n    if (Math.abs(z) >= Config.accelerationRequired) {\n      valid += 1;\n    }\n    if (valid >= 2) {\n      deviceMotionLocker.current = true;\n      setTimeout(() => {\n        deviceMotionLocker.current = false;\n      }, 300);\n      onInput();\n    }\n  };\n\n  useEffect(() => {\n    initApp();\n    return exitGame();\n  }, []);\n\n  useEffect(() => {\n    if (window.DeviceMotionEvent) {\n      window.addEventListener('devicemotion', onDeviceMotion, true);\n      setActiveTouch( false);\n    } else {\n      setActiveTouch(true);\n    }\n  });\n\n  const actionType = activeTouch ? 'Touch' : 'Swing';\n\n  return (\n      <div className=\"app\" onClick={onTouch}>\n        {stageState === 'start' && (\n            <div className=\"stage\">\n              {maxScore >= 1 && (<div className=\"max-score\">MAX SCORE: {maxScore}</div>)}\n              <div className=\"title\"><div className=\"big-title\">Ping Pong</div>Challenge!</div>\n              <div className=\"blink\">Turn up the volume and {actionType} your phone to start</div>\n            </div>\n        )}\n        {stageState === 'game' && (\n            <div className=\"game\">\n              <div className=\"title\">\n                <div className=\"big-title\">Score</div>\n                <div className=\"big-title\">{scoreState}</div>\n              </div>\n            </div>\n        )}\n        {stageState === 'over' && (\n            <div className=\"game\">\n              <div className=\"title\">\n                <div className=\"title\"><div className=\"big-title\">Game Over!</div></div>\n                <div className=\"blink\">Score: {scoreState}</div>\n              </div>\n            </div>\n        )}\n        {stageState === 'hack' && (\n            <div className=\"game\">\n              <div className=\"title\">\n                <div className=\"title\"><div className=\"big-title\">Are you a GOD?</div></div>\n              </div>\n            </div>\n        )}\n        {Config.debug && (\n            <div className=\"debug\">\n              <ul>\n                <li>FPS: {fps}</li>\n                <li>Stage: {stageState}</li>\n                <li>Score: {scoreState}</li>\n              </ul>\n            </div>\n        )}\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}